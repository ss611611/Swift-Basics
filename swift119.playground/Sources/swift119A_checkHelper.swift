
public typealias Box = (width: Int, height: Int)

func drawBox(width: Int, height: Int, base: Int = 10) {
    let padding = (base - width) / 2
    let extraSpace = (Double(base) - Double(width)).truncatingRemainder(dividingBy: 2) != 0
    let baseString = Array.init(repeating: "　", count: padding).joined() + (extraSpace ? " " : "")
    let widthString = "＋" + Array.init(repeating: "一", count: width).joined() + "＋"
    let spacingString = Array.init(repeating: "　", count: width).joined()
    let heightString = Array.init(repeating: "｜" + spacingString + "｜", count: height).joined(separator: "\n" + baseString)
    
    print(baseString + widthString)
    print(baseString + heightString)
    print(baseString + widthString)
}

public func drawBoxes(_ boxes: [(Int, Int)]) {
    
    for box in boxes.reversed() {
        drawBox(width: box.0, height: box.1)
    }
}


let boxTestCases: [(test: [(Int, Int)], sorted: [(Int, Int)])] = [([(4, 3), (3, 3), (1, 3), (2, 3), (3, 2), (1, 2), (5, 2)], [(5, 2), (4, 3), (3, 3), (3, 2), (2, 3), (1, 3), (1, 2)]), ([(9, 1), (10, 3), (2, 1), (2, 3), (6, 2), (3, 3), (1, 1)], [(10, 3), (9, 1), (6, 2), (3, 3), (2, 3), (2, 1), (1, 1)]), ([(3, 3), (1, 1), (8, 1), (5, 3), (4, 2), (9, 2), (7, 1)], [(9, 2), (8, 1), (7, 1), (5, 3), (4, 2), (3, 3), (1, 1)]), ([(6, 2), (9, 1), (9, 3), (9, 2), (2, 2), (10, 2), (1, 3)], [(10, 2), (9, 3), (9, 2), (9, 1), (6, 2), (2, 2), (1, 3)]), ([(7, 2), (9, 2), (1, 2), (4, 3), (6, 1), (10, 3), (10, 2)], [(10, 3), (10, 2), (9, 2), (7, 2), (6, 1), (4, 3), (1, 2)]), ([(2, 2), (4, 3), (6, 3), (10, 1), (8, 2), (1, 3), (5, 1)], [(10, 1), (8, 2), (6, 3), (5, 1), (4, 3), (2, 2), (1, 3)]), ([(4, 3), (2, 3), (10, 3), (8, 3), (1, 3), (4, 1), (6, 2)], [(10, 3), (8, 3), (6, 2), (4, 3), (4, 1), (2, 3), (1, 3)]), ([(3, 2), (10, 3), (8, 3), (2, 3), (3, 3), (9, 1), (2, 2)], [(10, 3), (9, 1), (8, 3), (3, 3), (3, 2), (2, 3), (2, 2)]), ([(8, 1), (7, 2), (1, 2), (6, 1), (7, 1), (4, 3), (9, 2)], [(9, 2), (8, 1), (7, 2), (7, 1), (6, 1), (4, 3), (1, 2)]), ([(8, 3), (2, 3), (5, 3), (6, 2), (3, 2), (4, 2), (5, 2)], [(8, 3), (6, 2), (5, 3), (5, 2), (4, 2), (3, 2), (2, 3)]), ([(4, 1), (10, 2), (2, 2), (2, 3), (1, 3), (9, 3), (5, 2)], [(10, 2), (9, 3), (5, 2), (4, 1), (2, 3), (2, 2), (1, 3)]), ([(3, 2), (7, 1), (7, 3), (3, 1), (9, 1), (4, 3), (8, 2)], [(9, 1), (8, 2), (7, 3), (7, 1), (4, 3), (3, 2), (3, 1)]), ([(4, 1), (5, 2), (10, 1), (3, 3), (5, 3), (6, 1), (1, 2)], [(10, 1), (6, 1), (5, 3), (5, 2), (4, 1), (3, 3), (1, 2)])]


public func 箱子疊疊樂(排序: ((Box), (Box)) -> Bool) {
    for testCase in boxTestCases {
        let answer = testCase.test.sorted(by: 排序)
        
        var index = 0
        let correct = answer.allSatisfy {
            let correct = testCase.sorted[index] == $0
            index += 1
            return correct
        }
        
        if !correct {
            print("❌ 你放的是：\(answer) \n正確的應該是：\(testCase.sorted)")
            return
        }
    }
    print("✅ 箱子疊疊樂成功。")
}



public typealias 撲克牌 = (花色: String, 號碼: String)
let cardTestCases: [(cards: [撲克牌], sorted: [String])] = [([("方塊", "3"), ("黑桃", "Q"), ("方塊", "Q"), ("紅心", "2"), ("方塊", "A"), ("方塊", "A")], ["紅心2", "方塊A", "方塊A", "黑桃Q", "方塊Q", "方塊3"]), ([("方塊", "2"), ("紅心", "7"), ("紅心", "5")], ["方塊2", "紅心7", "紅心5"]), ([("梅花", "7"), ("方塊", "J"), ("紅心", "8"), ("方塊", "K"), ("紅心", "4"), ("方塊", "A"), ("紅心", "2"), ("方塊", "2"), ("梅花", "Q")], ["紅心2", "方塊2", "方塊A", "方塊K", "梅花Q", "方塊J", "紅心8", "梅花7", "紅心4"]), ([("梅花", "Q"), ("梅花", "J"), ("黑桃", "2"), ("方塊", "8"), ("梅花", "10"), ("黑桃", "8"), ("方塊", "Q"), ("黑桃", "Q"), ("黑桃", "5"), ("梅花", "2"), ("黑桃", "3")], ["黑桃2", "梅花2", "黑桃Q", "方塊Q", "梅花Q", "梅花J", "梅花10", "黑桃8", "方塊8", "黑桃5", "黑桃3"]), ([("紅心", "7"), ("黑桃", "6"), ("方塊", "J"), ("紅心", "3"), ("方塊", "4"), ("紅心", "9"), ("黑桃", "6"), ("黑桃", "10"), ("黑桃", "6"), ("方塊", "10"), ("黑桃", "10")], ["方塊J", "黑桃10", "黑桃10", "方塊10", "紅心9", "紅心7", "黑桃6", "黑桃6", "黑桃6", "方塊4", "紅心3"]), ([("方塊", "10"), ("方塊", "10"), ("紅心", "K"), ("黑桃", "9"), ("黑桃", "K"), ("紅心", "10"), ("梅花", "A")], ["梅花A", "黑桃K", "紅心K", "紅心10", "方塊10", "方塊10", "黑桃9"]), ([("方塊", "J"), ("黑桃", "9"), ("梅花", "2"), ("紅心", "A")], ["梅花2", "紅心A", "方塊J", "黑桃9"]), ([("紅心", "K"), ("黑桃", "3"), ("黑桃", "9"), ("紅心", "Q"), ("梅花", "4"), ("梅花", "K"), ("黑桃", "10")], ["紅心K", "梅花K", "紅心Q", "黑桃10", "黑桃9", "梅花4", "黑桃3"]), ([("方塊", "A"), ("方塊", "K"), ("黑桃", "9"), ("紅心", "A"), ("紅心", "9"), ("梅花", "7"), ("梅花", "10"), ("黑桃", "5"), ("紅心", "6"), ("方塊", "3")], ["紅心A", "方塊A", "方塊K", "梅花10", "黑桃9", "紅心9", "梅花7", "紅心6", "黑桃5", "方塊3"]), ([("梅花", "A")], ["梅花A"]), ([("梅花", "3"), ("紅心", "J"), ("紅心", "Q"), ("方塊", "2"), ("方塊", "6"), ("方塊", "10"), ("紅心", "9"), ("梅花", "3"), ("紅心", "9"), ("紅心", "4"), ("方塊", "2"), ("梅花", "A")], ["方塊2", "方塊2", "梅花A", "紅心Q", "紅心J", "方塊10", "紅心9", "紅心9", "方塊6", "紅心4", "梅花3", "梅花3"]), ([("梅花", "5"), ("紅心", "A"), ("黑桃", "Q"), ("梅花", "10")], ["紅心A", "黑桃Q", "梅花10", "梅花5"]), ([("梅花", "5"), ("梅花", "Q"), ("梅花", "9"), ("方塊", "3"), ("方塊", "6"), ("方塊", "3"), ("黑桃", "2"), ("方塊", "K"), ("黑桃", "9")], ["黑桃2", "方塊K", "梅花Q", "黑桃9", "梅花9", "方塊6", "梅花5", "方塊3", "方塊3"]), ([("黑桃", "3"), ("梅花", "3")], ["黑桃3", "梅花3"]), ([("黑桃", "8"), ("梅花", "4"), ("紅心", "J"), ("方塊", "3"), ("梅花", "5"), ("黑桃", "K"), ("紅心", "7"), ("黑桃", "J")], ["黑桃K", "黑桃J", "紅心J", "黑桃8", "紅心7", "梅花5", "梅花4", "方塊3"]), ([("紅心", "6"), ("方塊", "9"), ("方塊", "9"), ("黑桃", "J"), ("黑桃", "K"), ("黑桃", "3")], ["黑桃K", "黑桃J", "方塊9", "方塊9", "紅心6", "黑桃3"]), ([("方塊", "7"), ("黑桃", "K"), ("紅心", "Q"), ("梅花", "3"), ("黑桃", "A")], ["黑桃A", "黑桃K", "紅心Q", "方塊7", "梅花3"]), ([("方塊", "A"), ("梅花", "7"), ("黑桃", "9"), ("梅花", "5"), ("方塊", "10"), ("梅花", "Q")], ["方塊A", "梅花Q", "方塊10", "黑桃9", "梅花7", "梅花5"]), ([("梅花", "10"), ("梅花", "7"), ("方塊", "5"), ("方塊", "8"), ("梅花", "A"), ("方塊", "A")], ["方塊A", "梅花A", "梅花10", "方塊8", "梅花7", "方塊5"]), ([("黑桃", "J"), ("梅花", "4"), ("黑桃", "10"), ("梅花", "A"), ("紅心", "8"), ("紅心", "10"), ("黑桃", "6"), ("梅花", "9"), ("黑桃", "6"), ("梅花", "10")], ["梅花A", "黑桃J", "黑桃10", "紅心10", "梅花10", "梅花9", "紅心8", "黑桃6", "黑桃6", "梅花4"]), ([("梅花", "2"), ("黑桃", "2"), ("黑桃", "K"), ("梅花", "J")], ["黑桃2", "梅花2", "黑桃K", "梅花J"]), ([("黑桃", "Q"), ("方塊", "K"), ("黑桃", "10"), ("紅心", "K"), ("紅心", "10"), ("方塊", "2"), ("方塊", "A"), ("黑桃", "10"), ("紅心", "A"), ("紅心", "A")], ["方塊2", "紅心A", "紅心A", "方塊A", "紅心K", "方塊K", "黑桃Q", "黑桃10", "黑桃10", "紅心10"]), ([("方塊", "K"), ("黑桃", "K"), ("紅心", "2"), ("黑桃", "A"), ("梅花", "Q"), ("紅心", "A"), ("黑桃", "2"), ("方塊", "10"), ("梅花", "J")], ["黑桃2", "紅心2", "黑桃A", "紅心A", "黑桃K", "方塊K", "梅花Q", "梅花J", "方塊10"]), ([("黑桃", "K"), ("黑桃", "Q"), ("方塊", "K"), ("黑桃", "2")], ["黑桃2", "黑桃K", "方塊K", "黑桃Q"]), ([("梅花", "A"), ("黑桃", "3"), ("黑桃", "10")], ["梅花A", "黑桃10", "黑桃3"])]

func cardLabel(_ card: 撲克牌) -> String { card.花色 + card.號碼 }

public func 大老二排序測試(_ sortBy: ([撲克牌]) -> [撲克牌]) {
    for testCase in cardTestCases {
        let testAnswer = sortBy(testCase.cards).map(cardLabel)
        if testAnswer != testCase.sorted {
            let cards = testCase.cards.map(cardLabel)
            print("❌ \(cards) 排序後應為 \(testCase.sorted)，但您的排序結果是 \(testAnswer)")
            return
        }
    }
    print("✅ 您的大老二排序沒有問題")
}


